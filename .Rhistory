# Plot a boxplot
boxplot(values, values, values, values, values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5), horizontal=FALSE)
# Plot the points spread along the X axis
spreadPointsChart(values, position, col="green", plotBins=FALSE, plotOutliers=TRUE, horiz=FALSE)
# Plot the points spread along the X axis
spreadPoints(values, position, col="green", plotBins=FALSE, plotOutliers=TRUE, horiz=FALSE)
spreadPoints <- function(values, position, pointCex=1, col="black", alpha=0.5, plotBins=FALSE, plotOutliers=FALSE,
range=1.5, horiz=FALSE, fitToBoxWidth=TRUE, xpd=FALSE, widthCex=1){
# Calculate the point size
ptSize <- calculatePointShapeSize(cex=pointCex)
# Get the whisker thresholds used for the boxplot
whiskerInfo <- identifyWhiskersAndOutliers(values, range)
# If not plotting outliers - remove them
if(plotOutliers == FALSE){
values <- values[values <= whiskerInfo$Upper[1] & values >= whiskerInfo$Lower[1]]
}
# Set the colour alpha
colour <- setAlpha(col, alpha)
# Get the aixs limits
axisLimits <- par("usr")
# Assign each of the values into a bin - the number of bins is defined by the yPad
bins <- cut(values, breaks = (axisLimits[4] - axisLimits[3])/ptSize[2])
if(horiz){
bins <- cut(values, breaks = (axisLimits[2] - axisLimits[1])/ptSize[2])
}
# Identify the indices of the values that are present in each bin
indicesOfValuesInBins <- identifyValuesInBins(bins)
# Calculate number of boxplots in current plot
nBoxes <- floor(axisLimits[2])
if(horiz){
nBoxes <- floor(axisLimits[4])
}
# Examine each bin
for(key in names(indicesOfValuesInBins)){
# Check if more than one point present
if(length(indicesOfValuesInBins[[key]]) > 1){
# Note the number of points
nPoints <- length(indicesOfValuesInBins[[key]])
# Calculate the space available for each point
# 0.8 is for when multiple plots are available - boxplot width is 80% of space available
# 0.4 seems to work better for a single box - I have no idea why??
spaceAvailable <- min(ptSize[1], (widthCex*0.8)/nPoints)
if(nBoxes == 1){
spaceAvailable <- min(ptSize[1], (widthCex*0.4)/nPoints)
}
if(fitToBoxWidth == FALSE){
spaceAvailable <- ptSize[1]
}
# Define new X positions of each point      <-.->
xPositions <- seq(from=position - (0.5*nPoints*spaceAvailable),
to=position + (0.5*nPoints*spaceAvailable),
length.out=nPoints)
# Plot the points - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]]], y=xPositions, pch=17, col=colour, xpd=xpd, cex=pointCex)
}else{
points(x=xPositions, y=values[indicesOfValuesInBins[[key]]], pch=17, col=colour, xpd=xpd, cex=pointCex)
}
# Check if single point present
}else if(length(indicesOfValuesInBins[[key]]) == 1){
# Plot the point - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]][1]], y=position, pch=17, col=colour, xpd=xpd, cex=pointCex)
}else{
points(x=position, y=values[indicesOfValuesInBins[[key]][1]], pch=17, col=colour, xpd=xpd, cex=pointCex)
}
}
}
# Plot the bins if requested - for testing
if(plotBins){
plotBins(bins, col="green")
}
}
# Plot a boxplot
boxplot(values, values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=TRUE)
position <- 1
# Plot the points spread along the X axis
spreadPoints(values, position, col="green", plotBins=FALSE, plotOutliers=TRUE, horiz=FALSE)
# Plot a boxplot
boxplot(values, values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=TRUE)
# Plot the points spread along the X axis
spreadPoints(values, position, col="green", plotBins=FALSE, plotOutliers=TRUE, horiz=TRUE)
# Plot a boxplot
boxplot(values, values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=TRUE)
# Plot the points spread along the X axis
spreadPoints(values, position, col="green", plotBins=FALSE, plotOutliers=FALSE, horiz=TRUE)
?lm()
?boxplot
lm()
lm
boxplot
values <- rexp(n=50, rate=2)
ddf = data.frame(NUMS = rnorm(500), GRP = sample(LETTERS[1:5],500,replace=T))
reformulate(termlabels = c('x','z'), response = 'y')
formula <- reformulate(termlabels = c('x','z'), response = 'y')
RHS
attr(formula)
formula[1]
formula[2]
formula[3]
formula[4]
formula
as.character(formula)
args <- as.character(formula)
response <- args[2]
factor <- args[3]
response
factor
seq_len(c(2,3))
library(spreadPoints)
spreadPoints <- function(data, responseColumn, categoriesColumn, pointCex=1, col="black", pch=19, alpha=0.5, plotBins=FALSE,
plotOutliers=FALSE, range=1.5, horiz=FALSE, fitToBoxWidth=TRUE, xpd=FALSE, widthCex=1){
# Calculate the point size
ptSize <- calculatePointShapeSize(cex=pointCex)
# Examine each of the categories within column provided
categories <- levels(data[, categoriesColumn])
for(position in seq_along(categories)){
# Define the values
values <- data[data[, categoriesColumn] == categories[position], categoriesColumn]
# Get the whisker thresholds used for the boxplot
whiskerInfo <- identifyWhiskersAndOutliers(values, range)
# If not plotting outliers - remove them
if(plotOutliers == FALSE){
values <- values[values <= whiskerInfo$Upper[1] & values >= whiskerInfo$Lower[1]]
}
# Set the colour alpha
colour <- setAlpha(col, alpha)
# Get the aixs limits
axisLimits <- par("usr")
# Assign each of the values into a bin - the number of bins is defined by the yPad
bins <- cut(values, breaks = (axisLimits[4] - axisLimits[3])/ptSize[2])
if(horiz){
bins <- cut(values, breaks = (axisLimits[2] - axisLimits[1])/ptSize[2])
}
# Identify the indices of the values that are present in each bin
indicesOfValuesInBins <- identifyValuesInBins(bins)
# Calculate number of boxplots in current plot
nBoxes <- floor(axisLimits[2])
if(horiz){
nBoxes <- floor(axisLimits[4])
}
# Examine each bin
for(key in names(indicesOfValuesInBins)){
# Check if more than one point present
if(length(indicesOfValuesInBins[[key]]) > 1){
# Note the number of points
nPoints <- length(indicesOfValuesInBins[[key]])
# Calculate the space available for each point
# 0.8 is for when multiple plots are available - boxplot width is 80% of space available
# 0.4 seems to work better for a single box - I have no idea why??
spaceAvailable <- min(ptSize[1], (widthCex*0.8)/nPoints)
if(nBoxes == 1){
spaceAvailable <- min(ptSize[1], (widthCex*0.4)/nPoints)
}
if(fitToBoxWidth == FALSE){
spaceAvailable <- ptSize[1]
}
# Define new X positions of each point      <-.->
xPositions <- seq(from=position - (0.5*nPoints*spaceAvailable),
to=position + (0.5*nPoints*spaceAvailable),
length.out=nPoints)
# Plot the points - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]]], y=xPositions, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=xPositions, y=values[indicesOfValuesInBins[[key]]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
# Check if single point present
}else if(length(indicesOfValuesInBins[[key]]) == 1){
# Plot the point - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]][1]], y=position, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=position, y=values[indicesOfValuesInBins[[key]][1]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
}
}
# Plot the bins if requested - for testing
if(plotBins){
plotBins(bins, col="green")
}
}
}
spreadPoints(data=ddf, responseColumn="NUMS", categoriesColumn="GRP")
source('~/Desktop/Research/spreadPoints/R/spreadPoints.R')
spreadPoints(data=ddf, responseColumn="NUMS", categoriesColumn="GRP")
spreadPoints <- function(data, responseColumn, categoriesColumn, pointCex=1, col="black", pch=19, alpha=0.5, plotBins=FALSE,
plotOutliers=FALSE, range=1.5, horiz=FALSE, fitToBoxWidth=TRUE, xpd=FALSE, widthCex=1){
# Calculate the point size
ptSize <- calculatePointShapeSize(cex=pointCex)
# Examine each of the categories within column provided
categories <- levels(data[, categoriesColumn])
for(position in seq_along(categories)){
# Define the values
values <- data[data[, categoriesColumn] == categories[position], categoriesColumn]
# Get the whisker thresholds used for the boxplot
whiskerInfo <- identifyWhiskersAndOutliers(values, range)
# If not plotting outliers - remove them
if(plotOutliers == FALSE){
values <- values[values <= whiskerInfo$Upper[1] & values >= whiskerInfo$Lower[1]]
}
# Set the colour alpha
colour <- setAlpha(col, alpha)
# Get the aixs limits
axisLimits <- par("usr")
# Assign each of the values into a bin - the number of bins is defined by the yPad
bins <- cut(values, breaks = (axisLimits[4] - axisLimits[3])/ptSize[2])
if(horiz){
bins <- cut(values, breaks = (axisLimits[2] - axisLimits[1])/ptSize[2])
}
# Identify the indices of the values that are present in each bin
indicesOfValuesInBins <- identifyValuesInBins(bins)
# Calculate number of boxplots in current plot
nBoxes <- floor(axisLimits[2])
if(horiz){
nBoxes <- floor(axisLimits[4])
}
# Examine each bin
for(key in names(indicesOfValuesInBins)){
# Check if more than one point present
if(length(indicesOfValuesInBins[[key]]) > 1){
# Note the number of points
nPoints <- length(indicesOfValuesInBins[[key]])
# Calculate the space available for each point
# 0.8 is for when multiple plots are available - boxplot width is 80% of space available
# 0.4 seems to work better for a single box - I have no idea why??
spaceAvailable <- min(ptSize[1], (widthCex*0.8)/nPoints)
if(nBoxes == 1){
spaceAvailable <- min(ptSize[1], (widthCex*0.4)/nPoints)
}
if(fitToBoxWidth == FALSE){
spaceAvailable <- ptSize[1]
}
# Define new X positions of each point      <-.->
xPositions <- seq(from=position - (0.5*nPoints*spaceAvailable),
to=position + (0.5*nPoints*spaceAvailable),
length.out=nPoints)
# Plot the points - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]]], y=xPositions, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=xPositions, y=values[indicesOfValuesInBins[[key]]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
# Check if single point present
}else if(length(indicesOfValuesInBins[[key]]) == 1){
# Plot the point - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]][1]], y=position, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=position, y=values[indicesOfValuesInBins[[key]][1]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
}
}
# Plot the bins if requested - for testing
if(plotBins){
plotBins(bins, col="green")
}
}
}
spreadPoints(data=ddf, responseColumn="NUMS", categoriesColumn="GRP")
head(ddf)
responseColumn="NUMS"
categoriesColumn="GRP"
data=ddf
categories <- levels(data[, categoriesColumn])
categories
data[data[, categoriesColumn] == categories[position], categoriesColumn]
position <- 1
data[data[, categoriesColumn] == categories[position], categoriesColumn]
# Get the unique categories in the categories column
categories <- levels(data[, categoriesColumn])
# Convert the factor column back to character
data[, categoriesColumn] <- as.character(data[, categoriesColumn])
data[data[, categoriesColumn] == categories[position], categoriesColumn]
data=ddf
# Get the unique categories in the categories column
categories <- levels(data[, categoriesColumn])
# Define the values
values <- data[data[, categoriesColumn] == categories[position], data]
data[, categoriesColumn]
data[, categoriesColumn] == categories[position]
# Define the values
values <- data[data[, categoriesColumn] == categories[position], responseColumn]
values
spreadPoints <- function(data, responseColumn, categoriesColumn, pointCex=1, col="black", pch=19, alpha=0.5, plotBins=FALSE,
plotOutliers=FALSE, range=1.5, horiz=FALSE, fitToBoxWidth=TRUE, xpd=FALSE, widthCex=1){
# Calculate the point size
ptSize <- calculatePointShapeSize(cex=pointCex)
# Get the unique categories in the categories column
categories <- levels(data[, categoriesColumn])
# Examine each of the categories within column provided
for(position in seq_along(categories)){
# Define the values
values <- data[data[, categoriesColumn] == categories[position], responseColumn]
# Get the whisker thresholds used for the boxplot
whiskerInfo <- identifyWhiskersAndOutliers(values, range)
# If not plotting outliers - remove them
if(plotOutliers == FALSE){
values <- values[values <= whiskerInfo$Upper[1] & values >= whiskerInfo$Lower[1]]
}
# Set the colour alpha
colour <- setAlpha(col, alpha)
# Get the aixs limits
axisLimits <- par("usr")
# Assign each of the values into a bin - the number of bins is defined by the yPad
bins <- cut(values, breaks = (axisLimits[4] - axisLimits[3])/ptSize[2])
if(horiz){
bins <- cut(values, breaks = (axisLimits[2] - axisLimits[1])/ptSize[2])
}
# Identify the indices of the values that are present in each bin
indicesOfValuesInBins <- identifyValuesInBins(bins)
# Calculate number of boxplots in current plot
nBoxes <- floor(axisLimits[2])
if(horiz){
nBoxes <- floor(axisLimits[4])
}
# Examine each bin
for(key in names(indicesOfValuesInBins)){
# Check if more than one point present
if(length(indicesOfValuesInBins[[key]]) > 1){
# Note the number of points
nPoints <- length(indicesOfValuesInBins[[key]])
# Calculate the space available for each point
# 0.8 is for when multiple plots are available - boxplot width is 80% of space available
# 0.4 seems to work better for a single box - I have no idea why??
spaceAvailable <- min(ptSize[1], (widthCex*0.8)/nPoints)
if(nBoxes == 1){
spaceAvailable <- min(ptSize[1], (widthCex*0.4)/nPoints)
}
if(fitToBoxWidth == FALSE){
spaceAvailable <- ptSize[1]
}
# Define new X positions of each point      <-.->
xPositions <- seq(from=position - (0.5*nPoints*spaceAvailable),
to=position + (0.5*nPoints*spaceAvailable),
length.out=nPoints)
# Plot the points - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]]], y=xPositions, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=xPositions, y=values[indicesOfValuesInBins[[key]]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
# Check if single point present
}else if(length(indicesOfValuesInBins[[key]]) == 1){
# Plot the point - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]][1]], y=position, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=position, y=values[indicesOfValuesInBins[[key]][1]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
}
}
# Plot the bins if requested - for testing
if(plotBins){
plotBins(bins, col="green")
}
}
}
boxplot(NUMS ~ GRP, data = ddf, lwd = 2, ylab = 'NUMS')
spreadPoints(data=ddf, responseColumn="NUMS", categoriesColumn="GRP")
#' @examples
#' # Generate some example points - drawn from exponential distribution
#' values <- rexp(n=50, rate=2)
#'
#' # Plot a boxplot
#' boxplot(values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
#'         horizontal=FALSE)
#'
#' # Plot the points spread along the X axis
#' spreadPoints(values, position=1)
spreadPoints <- function(values, position, pointCex=1, col="black", pch=19, alpha=0.5, plotBins=FALSE, plotOutliers=FALSE,
range=1.5, horiz=FALSE, fitToBoxWidth=TRUE, xpd=FALSE, widthCex=1){
# Calculate the point size
ptSize <- calculatePointShapeSize(cex=pointCex)
# Get the whisker thresholds used for the boxplot
whiskerInfo <- identifyWhiskersAndOutliers(values, range)
# If not plotting outliers - remove them
if(plotOutliers == FALSE){
values <- values[values <= whiskerInfo$Upper[1] & values >= whiskerInfo$Lower[1]]
}
# Set the colour alpha
colour <- setAlpha(col, alpha)
# Get the aixs limits
axisLimits <- par("usr")
# Assign each of the values into a bin - the number of bins is defined by the yPad
bins <- cut(values, breaks = (axisLimits[4] - axisLimits[3])/ptSize[2])
if(horiz){
bins <- cut(values, breaks = (axisLimits[2] - axisLimits[1])/ptSize[2])
}
# Identify the indices of the values that are present in each bin
indicesOfValuesInBins <- identifyValuesInBins(bins)
# Calculate number of boxplots in current plot
nBoxes <- floor(axisLimits[2])
if(horiz){
nBoxes <- floor(axisLimits[4])
}
# Examine each bin
for(key in names(indicesOfValuesInBins)){
# Check if more than one point present
if(length(indicesOfValuesInBins[[key]]) > 1){
# Note the number of points
nPoints <- length(indicesOfValuesInBins[[key]])
# Calculate the space available for each point
# 0.8 is for when multiple plots are available - boxplot width is 80% of space available
# 0.4 seems to work better for a single box - I have no idea why??
spaceAvailable <- min(ptSize[1], (widthCex*0.8)/nPoints)
if(nBoxes == 1){
spaceAvailable <- min(ptSize[1], (widthCex*0.4)/nPoints)
}
if(fitToBoxWidth == FALSE){
spaceAvailable <- ptSize[1]
}
# Define new X positions of each point      <-.->
xPositions <- seq(from=position - (0.5*nPoints*spaceAvailable),
to=position + (0.5*nPoints*spaceAvailable),
length.out=nPoints)
# Plot the points - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]]], y=xPositions, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=xPositions, y=values[indicesOfValuesInBins[[key]]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
# Check if single point present
}else if(length(indicesOfValuesInBins[[key]]) == 1){
# Plot the point - check if horizontal plotting
if(horiz){
points(x=values[indicesOfValuesInBins[[key]][1]], y=position, col=colour, xpd=xpd, cex=pointCex, pch=pch)
}else{
points(x=position, y=values[indicesOfValuesInBins[[key]][1]], col=colour, xpd=xpd, cex=pointCex, pch=pch)
}
}
}
# Plot the bins if requested - for testing
if(plotBins){
plotBins(bins, col="green")
}
}
detach("package:spreadPoints", unload=TRUE)
library("devtools")
library("roxygen2")
packageDirectory <- "/home/josephcrispell/Desktop/Research/spreadPoints/"
setwd(packageDirectory)
document()
install_github("JosephCrispell/spreadPoints")
library(spreadPoints)
values <- rexp(n=50, rate=2)
boxplot(values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=FALSE)
spreadPoints(values, position=1)
randomSamples = data.frame(Values = rnorm(500), Category = sample(LETTERS[1:5],500,replace=T))
?sample
randomSamples = data.frame(Values = rnorm(500), Category = sample(c('A', 'B', 'C', 'D', 'E'), size=500, replace=TRUE))
head(randomSamples)
boxplot(Values ~ Category, data = randomSamples, lwd = 2, ylab = 'NUMS')
spreadPoints(data=randomSamples, responseColumn="Values", categoriesColumn="Category")
detach("package:spreadPoints", unload=TRUE)
setwd(packageDirectory)
document()
install_github("JosephCrispell/spreadPoints")
library(spreadPoints)
values <- rexp(n=50, rate=2)
boxplot(values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=FALSE)
spreadPoints(values, position=1)
randomSamples = data.frame(Values = rnorm(500), Category = sample(c('A', 'B', 'C', 'D', 'E'), size=500, replace=TRUE))
boxplot(Values ~ Category, data = randomSamples, lwd = 2, ylab = 'NUMS')
spreadPointsMultiple(data=randomSamples, responseColumn="Values", categoriesColumn="Category")
data=randomSamples
responseColumn="Values"
categoriesColumn="Category"
categories <- levels(data[, categoriesColumn])
categories
position=1
pointCex=1
col="black"
pch=19
alpha=0.5
plotBins=FALSE
plotOutliers=FALSE
range=1.5
horiz=FALSE
fitToBoxWidth=TRUE
xpd=FALSE
widthCex=1
# Define the values
values <- data[data[, categoriesColumn] == categories[position], responseColumn]
spreadPoints(values, position, pointCex, col, pch, alpha, plotBins, plotOutliers,
range=, horiz, fitToBoxWidth, xpd, widthCex)
spreadPoints(values, position=position, pointCex, col, pch, alpha, plotBins, plotOutliers,
range=, horiz, fitToBoxWidth, xpd, widthCex)
spreadPoints(values, position=position, pointCex, col, pch, alpha, plotBins, plotOutliers,
range, horiz, fitToBoxWidth, xpd, widthCex)
detach("package:spreadPoints", unload=TRUE)
document()
install_github("JosephCrispell/spreadPoints")
library(spreadPoints)
values <- rexp(n=50, rate=2)
boxplot(values, xlab="",  ylab="", frame=FALSE, las=1, pch=19, outcol=rgb(1,0,0, 0.5),
horizontal=FALSE)
spreadPoints(values, position=1)
randomSamples = data.frame(Values = rnorm(500), Category = sample(c('A', 'B', 'C', 'D', 'E'), size=500, replace=TRUE))
boxplot(Values ~ Category, data = randomSamples, lwd = 2, ylab = 'NUMS')
spreadPointsMultiple(data=randomSamples, responseColumn="Values", categoriesColumn="Category")
ddf = data.frame(NUMS = rnorm(500), GRP = sample(LETTERS[1:5],500,replace=T))
boxplot(NUMS ~ GRP, data = ddf, lwd = 2, ylab = 'NUMS')
spreadPointsMultiple(data=ddf, responseColumn="NUMS", categoriesColumn="GRP")
ddf = data.frame(NUMS = rnorm(500), GRP = sample(LETTERS[1:5],500,replace=T))
boxplot(NUMS ~ GRP, data = ddf, lwd = 2, ylab = 'NUMS')
spreadPointsMultiple(data=ddf, responseColumn="NUMS", categoriesColumn="GRP", col="blue")
